<templateSet group="Dart">
  <template name="bltc" value=" abstract class $NAME$ implements Built&lt;$NAME$, $NAME$Builder&gt; {&#10;     $END$// fields go here}&quot;,&#10;          &#10;     $NAME$._();&#10;         &#10;     factory $NAME$([updates($NAME$Builder b)]) = _$$$NAME$;&#10; }" description="Built Value Class" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="blth" value="library $NAME$;&#10;            &#10;import 'dart:convert';&#10;            &#10;import 'package:built_collection/built_collection.dart';&#10;import 'package:built_value/built_value.dart';&#10;import 'package:built_value/serializer.dart';&#10;            &#10;part '$NAME$.g.dart';" description="Built Value file header" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="blts" value="abstract class $NAME$ implements Built&lt;$NAME$, $NAME$Builder&gt; {&#10;     $END$// fields go here}&quot;,&#10;          &#10;     $NAME$._();&#10;         &#10;     factory $NAME$([updates($NAME$Builder b)]) = _$$$NAME$;&#10;     &#10;         String toJson() {&#10;        return json.encode(serializers.serializeWith($NAME$.serializer, this));&#10;    }&#10;&#10;    static $NAME$ fromJson(String jsonString) {&#10;        return serializers.deserializeWith($NAME$.serializer, json.decode(jsonString));&#10;    }&#10;    &#10;     static Serializer&lt;$NAME$&gt; get serializer =&gt; _$$$NAME1$Serializer;&#10;&#10; }" description="Built Value (Serializable)" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME1" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="bltz" value="library serializers;&#10;&#10;import 'package:built_value/serializer.dart';&#10;import 'package:built_value/standard_json_plugin.dart';&#10;&#10;&#10;part 'serializers.g.dart';&#10;&#10;@SerializersFor(const [&#10;  BuiltVehicle,&#10;])&#10;final Serializers serializers =&#10;(_$serializers.toBuilder()..addPlugin(StandardJsonPlugin())).build();" description="Serialzers file" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="blte" value="class $NAME$ extends EnumClass {&#10;  static const $NAME$ $E1$ = _$$$E1$;&#10;  static const $NAME$ $E2$ = _$$$E2$;&#10;  static const $NAME$ $E3$ = _$$$E3$;&#10;  static const $NAME$ $E4$ = _$$$E4$;&#10;&#10;&#10;  const $NAME$._(String name) : super(name);&#10;&#10;  static BuiltSet&lt;$NAME$&gt; get values =&gt; _$values;&#10;&#10;  static $NAME$ valueOf(String name) =&gt; _$valueOf(name);&#10;&#10;  static Serializer&lt;$NAME$&gt; get serializer =&gt; _$$$NAME1$Serializer;&#10;}" description="BuildValue Enum" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="E1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="E2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="E3" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="E4" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME1" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="untd" value="import 'package:test/test.dart';&#10;&#10;void main() {&#10;  group('Unit test', () {&#10;    setUpAll(() {});&#10;&#10;    tearDownAll(() {});&#10;&#10;    setUp(() {});&#10;&#10;    tearDown(() {});&#10;&#10;    test('output', () {&#10;      // given&#10;&#10;      // when&#10;&#10;      // then&#10;&#10;      expect(1, 0);&#10;    });&#10;  });&#10;}" description="Unit test" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="tcase" value="    test('output', () {&#10;      // given&#10;&#10;      // when&#10;&#10;      // then&#10;&#10;      expect(1, 0);&#10;    });" description="test case" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="jser" value="@JsonSerializable(explicitToJson: true)&#10;class $NAME$  {&#10;&#10;  $NAME$() ;&#10;&#10;  factory $NAME$.fromJson(Map&lt;String, dynamic&gt; json) =&gt;&#10;      _$$$NAME$FromJson(json);&#10;&#10;  Map&lt;String, dynamic&gt; toJson() =&gt; _$$$NAME$ToJson(this);&#10;}" description="JSON serialisable" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logd" value="logType(this.runtimeType).d(&quot;$END$&quot;);" description="logger debug" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logw" value="logType(this.runtimeType).w(&quot;$END$&quot;);" description="Logger warning" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logi" value="logType(this.runtimeType).i(&quot;$END$&quot;);" description="Logger info" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="loge" value="String msg='$MSG$';&#10;logType(this.runtimeType).e(msg);&#10;throw TakkanException(msg);" description="Logs an error" toReformat="false" toShortenFQNames="true">
    <variable name="MSG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logne" value="logName('$END$').d('');" description="logger (name) debug" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="logni" value="logName('$END$').i('');" description="Logger (name) info" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="wtks" value="import 'package:flutter/material.dart';&#10;import 'package:flutter/widgets.dart';&#10;import 'package:flutter_test/flutter_test.dart';&#10;import 'package:precept_client/precept/builder/commonBuilder.dart';&#10;import 'package:precept_client/precept/library/partLibrary.dart';&#10;import 'package:precept_script/script/script.dart';&#10;import 'package:precept_script/script/part/pString.dart';&#10;&#10;import '../../helper/widgetTestTree.dart';&#10;&#10;/// See [developer guide]()&#10;void main() {&#10;  group('??? (kitchen-sink-??)', () {&#10;    WidgetTestTree testTree;&#10;    setUpAll(() {});&#10;&#10;    tearDownAll(() {});&#10;&#10;    setUp(() {});&#10;&#10;    tearDown(() {});&#10;&#10;    testWidgets('??? ', (WidgetTester tester) async {&#10;      // given&#10;      partLibrary.init();&#10;      final script = PScript(isStatic: IsStatic.yes);&#10;      script.init();&#10;      // when&#10;      final widgetTree = MaterialApp(&#10;          home: PageBuilder().build(&#10;            config: script.components[0].routes[0].page,&#10;          ));&#10;      await tester.pumpWidget(widgetTree);&#10;      testTree = WidgetTestTree(tester.allWidgets.toList());&#10;      // then&#10;&#10;      expect(testTree.pageIndex, 84);&#10;      expect(testTree.pageHasDataSource, isFalse);&#10;      expect(testTree.pageHasDataBinding, isFalse);&#10;      expect(testTree.pageHasEditState, isFalse);&#10;      expect(testTree.elementHasPanelState('Panel 2'), isTrue);&#10;      expect(testTree.elementHasPanelState('Panel 2-1'), isTrue);&#10;&#10;      expect(testTree.elementHasEditState('Panel 2'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Panel 2'), isFalse);&#10;      expect(testTree.elementHasDataSource('Panel 2'), isFalse);&#10;&#10;      expect(testTree.elementHasEditState('Panel 2-1'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Panel 2-1'), isFalse);&#10;      expect(testTree.elementHasDataSource('Panel 2-1'), isFalse);&#10;&#10;      expect(testTree.elementHasEditState('Part 1'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Part 1'), isFalse);&#10;      expect(testTree.elementHasDataSource('Part 1'), isFalse);&#10;&#10;      expect(testTree.elementHasEditState('Part 3'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Part 3'), isFalse);&#10;      expect(testTree.elementHasDataSource('Part 3'), isFalse);&#10;&#10;      expect(testTree.elementHasEditState('Part 2-2'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Part 2-2'), isFalse);&#10;      expect(testTree.elementHasDataSource('Part 2-2'), isFalse);&#10;&#10;&#10;      expect(testTree.elementHasEditState('Part 2-3'), isFalse);&#10;      expect(testTree.elementHasDataBinding('Part 2-1-1'), isFalse);&#10;      expect(testTree.elementHasDataSource('Part 2-1-2'), isFalse);&#10;    });&#10;  });&#10;}" description="Widgt test for Kitchen Sink" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>